version: "3.8"

services:
    # Microservice de notifications
    notification-app:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: notification-microservice
        ports:
            - "3002:3002"
        environment:
            NODE_ENV: production
            PORT: 3002
            DATABASE_URL: postgresql://notification_user:notification_pass@notification-db:5432/notification_db
            REDIS_URL: redis://notification-redis:6379
            BREVO_API_KEY: ${BREVO_API_KEY}
            SUPABASE_URL: ${SUPABASE_URL}
            SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
            LOG_LEVEL: info
            CORS_ORIGIN: ${CORS_ORIGIN:-*}
        depends_on:
            notification-db:
                condition: service_healthy
            notification-redis:
                condition: service_healthy
        restart: unless-stopped
        networks:
            - notification-network
        volumes:
            - ./logs:/app/logs
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Base de donn√©es PostgreSQL
    notification-db:
        image: postgres:15-alpine
        container_name: notification-postgres
        environment:
            POSTGRES_DB: notification_db
            POSTGRES_USER: notification_user
            POSTGRES_PASSWORD: notification_pass
            POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
        ports:
            - "5433:5432"
        volumes:
            - notification_postgres_data:/var/lib/postgresql/data
            - ./init-db:/docker-entrypoint-initdb.d
        restart: unless-stopped
        networks:
            - notification-network
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U notification_user -d notification_db",
                ]
            interval: 10s
            timeout: 5s
            retries: 5

    # Redis pour les files d'attente et le cache
    notification-redis:
        image: redis:7-alpine
        container_name: notification-redis
        ports:
            - "6380:6379"
        volumes:
            - notification_redis_data:/data
        restart: unless-stopped
        networks:
            - notification-network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
        command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

    # Interface d'administration Redis (optionnel)
    redis-commander:
        image: rediscommander/redis-commander:latest
        container_name: notification-redis-admin
        environment:
            REDIS_HOSTS: notification-redis:notification-redis:6379
        ports:
            - "8082:8081"
        depends_on:
            - notification-redis
        restart: unless-stopped
        networks:
            - notification-network
        profiles:
            - debug

    # Interface d'administration PostgreSQL (optionnel)
    pgadmin:
        image: dpage/pgadmin4:latest
        container_name: notification-pgadmin
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@notification.local
            PGADMIN_DEFAULT_PASSWORD: admin123
            PGADMIN_LISTEN_PORT: 80
        ports:
            - "8083:80"
        depends_on:
            - notification-db
        restart: unless-stopped
        networks:
            - notification-network
        volumes:
            - notification_pgadmin_data:/var/lib/pgadmin
        profiles:
            - debug

volumes:
    notification_postgres_data:
        driver: local
    notification_redis_data:
        driver: local
    notification_pgadmin_data:
        driver: local

networks:
    notification-network:
        driver: bridge
        name: notification-network
